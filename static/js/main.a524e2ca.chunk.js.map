{"version":3,"sources":["Components/Navbar.js","services/weather-service.js","services/storage-service.js","Components/SearchFieldtwo.js","Components/MainDayCard.js","views/HomePage.js","Store/reducer.js","Store/Store.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","src","textRegex","RegExp","convertUnitTemprature","num","isMetric","celsius","parseInt","cityid","a","req","axios","get","res","forcasts","manageDaysForcasts","data","cityId","dayForcast","Date","EpochTime","Temperature","Imperial","Value","WeatherText","replace","WindDirection","Wind","Direction","Localized","WindSpeed","Speed","Metric","Humidity","RelativeHumidity","CloudCover","console","log","Promise","reject","val","arr","reduce","acc","el","push","Id","Key","Label","LocalizedName","forcastData","DailyForecasts","time","EpochDate","min","Minimum","max","Maximum","weatherText","Day","IconPhrase","getDayForcast","getAutoCompOptions","getFiveDaysForcast","props","setDayForcast","setFiveDaysForcast","setCityName","useState","open","setOpen","options","setOptions","loading","length","useEffect","handleChange","e","target","value","reg","test","weatherService","handleSearch","city","fiveDaysForcast","id","style","width","onOpen","onClose","onChange","getOptionSelected","option","name","getOptionLabel","renderInput","params","TextField","label","InputProps","endAdornment","Fragment","CircularProgress","color","size","setIsMetric","cityName","unix","format","onClick","icon","faTint","faFlag","faWind","faCloud","map","item","i","key","date","HomePage","useSelector","state","favorites","initDayForcast","initFiveDaysForcast","SearchFieldtwo","MainDayCard","initialState","reducer","action","type","payload","Store","createStore","App","store","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a524e2ca.chunk.js","sourcesContent":["import React from \"react\";\r\nconst Navbar = () => {\r\n  return <section className=\"navbar\">\r\n      <div className=\"navbar-bg\"></div>\r\n      <div className=\"navbar-container\">\r\n        <div className=\"logo\">\r\n            <div className=\"img-container\">\r\n              <img src=\"https://res.cloudinary.com/explority/image/upload/v1580982526/pngguru.com_rutpgx.png\"/>\r\n            </div>\r\n            <h1>Weatherly!</h1>\r\n        </div>\r\n        <div className=\"nav-links\">\r\n        {/* <a href=\"#\">home</a>\r\n        <a href=\"#\">favorites</a> */}\r\n        </div>\r\n      </div>\r\n  </section>;\r\n};\r\n\r\nexport default Navbar;\r\n","import axios from 'axios';\r\n\r\nconst textRegex=new RegExp('w/','g');\r\nexport function convertUnitTemprature(num,isMetric)\r\n{\r\n  const celsius=parseInt((parseInt(num)-32)*5/9);\r\n  const res=(isMetric)?celsius:num;\r\n  return res;\r\n}\r\nasync function getFiveDaysForcast(cityid) {\r\n  const req = `https://dataservice.accuweather.com/forecasts/v1/daily/5day/${cityid}?apikey=EDoXcIUtqNmGbRlLbqNReSUUtgmnUHt0&language=en-us&details=true`;\r\n  const res = await axios.get(req);\r\n\r\n  const forcasts = manageDaysForcasts(res.data);\r\n  return forcasts;\r\n}\r\n async function getDayForcast(cityId) {\r\n  const req = `https://dataservice.accuweather.com/currentconditions/v1/${cityId}?apikey=EDoXcIUtqNmGbRlLbqNReSUUtgmnUHt0&language=en-us&details=true&metric=true\"`;\r\n try{\r\n     const res = await axios(req);\r\n     const data=res.data[0];\r\n     const dayForcast={\r\n         Date:data.EpochTime,\r\n         Temperature:data.Temperature.Imperial.Value,\r\n         WeatherText:data.WeatherText.replace(textRegex,'with'),\r\n         WindDirection:data.Wind.Direction.Localized,\r\n         WindSpeed:data.Wind.Speed.Metric.Value,\r\n         Humidity:data.RelativeHumidity,\r\n         CloudCover:data.CloudCover,\r\n     }\r\n     return dayForcast;\r\n }catch(e){\r\n     console.log('get day data faild , city id=',cityId,'error is',e)\r\n    return Promise.reject();\r\n }\r\n\r\n}\r\n async function getAutoCompOptions(val) {\r\n  const req = `https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=%09EDoXcIUtqNmGbRlLbqNReSUUtgmnUHt0&q=${val}&language=en-us HTTP/1.1`;\r\n  const res = await axios.get(req);\r\n  const arr=res.data.reduce((acc, el) => {\r\n    acc.push({ Id: el.Key, Label: el.LocalizedName });\r\n    return acc;\r\n  }, []);\r\n  return arr;\r\n}\r\n\r\nfunction manageDaysForcasts(forcastData) {\r\n  var temp = forcastData.DailyForecasts;\r\n  var arr = temp.reduce((acc, el) => {\r\n    acc.push({\r\n      time: el.EpochDate,\r\n      min: el.Temperature.Minimum.Value,\r\n      max: el.Temperature.Maximum.Value,\r\n      weatherText: el.Day.IconPhrase.replace(textRegex,'with')\r\n    });\r\n    return acc;\r\n  }, []);\r\n\r\n  return arr;\r\n}\r\nexport default{\r\n    getDayForcast,\r\n    getAutoCompOptions,\r\n    getFiveDaysForcast,\r\n    convertUnitTemprature\r\n}","function loadFromStorage(key) {\r\n    var val = localStorage.getItem(key)\r\n    return (val)? JSON.parse(val) : null;\r\n}\r\n\r\nfunction saveToStorage(key, val) {\r\n    localStorage[key] = JSON.stringify(val);\r\n}\r\n\r\n\r\nexport default {\r\n    loadFromStorage,\r\n    saveToStorage\r\n\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nimport weatherService from \"../services/weather-service\";\r\n\r\n\r\nfunction sleep(delay = 0) {\r\n  return new Promise(resolve => {\r\n    setTimeout(resolve, delay);\r\n  });\r\n}\r\n\r\nexport default props => {\r\n  const { setDayForcast, setFiveDaysForcast, setCityName } = props;\r\n  const [open, setOpen] = useState(false);\r\n  const [options, setOptions] = useState([]);\r\n  const loading = open && options.length === 0;\r\n\r\n  useEffect(() => {\r\n    let active = true;\r\n\r\n    if (!loading) {\r\n      return undefined;\r\n    }\r\n    return () => {\r\n      active = false;\r\n    };\r\n  }, [loading]);\r\n\r\n  useEffect(() => {\r\n    if (!open) {\r\n      setOptions([]);\r\n    }\r\n  }, [open]);\r\n  const handleChange = async e => {\r\n    if (e.target.value) {\r\n      const reg = /^[a-z]+$/;\r\n      console.log(\"changeing\", !reg.test(e.target.value), e.target.value);\r\n      //false for test reasons\r\n      if (reg.test(e.target.value)) {\r\n        try {\r\n          const res = await weatherService.getAutoCompOptions(e.target.value);\r\n          console.log('options are',res)\r\n          setOptions(res);\r\n        } catch (e) {\r\n          console.log(\"faild to get options\");\r\n        }\r\n      } else {\r\n        //error in input\r\n      }\r\n    }\r\n  };\r\n  const handleSearch = async (e, city) => {\r\n    if(city){\r\n      setCityName(city.Label);\r\n      try {\r\n        const dayForcast = await weatherService.getDayForcast(city.Id);\r\n        const fiveDaysForcast = await weatherService.getFiveDaysForcast(city.Id);\r\n        setDayForcast(dayForcast);\r\n        setFiveDaysForcast(fiveDaysForcast);\r\n      } catch (e) {\r\n        console.log(\"error in  changing city\", e);\r\n      }\r\n    }\r\n    };\r\n    return (\r\n    <Autocomplete\r\n      id=\"asynchronous-demo\"\r\n      style={{ width: 220 }}\r\n      open={open}\r\n      onOpen={() => {\r\n        setOpen(true);\r\n      }}\r\n      onClose={() => {\r\n        setOpen(false);\r\n      }}\r\n      onChange={handleSearch}\r\n      getOptionSelected={(option, value) => option.Label === value.name}\r\n      getOptionLabel={option => option.Label}\r\n      options={options}\r\n      loading={loading}\r\n      renderInput={params => (\r\n        <TextField\r\n          {...params}\r\n          onChange={handleChange}\r\n          label=\"Try Tel-aviv ,Berlin\"\r\n          style={{ width: 250 }}\r\n          InputProps={{\r\n            ...params.InputProps,\r\n            endAdornment: (\r\n              <React.Fragment>\r\n                {loading ? (\r\n                  <CircularProgress color=\"inherit\" size={20} />\r\n                ) : null}\r\n                {params.InputProps.endAdornment}\r\n              </React.Fragment>\r\n            )\r\n          }}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport SearchFieldtwo from \"../Components/SearchFieldtwo\";\r\n\r\nimport Moment from \"react-moment\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { convertUnitTemprature } from \"../services/weather-service\";\r\nimport {\r\n  faTint,\r\n  faFlag,\r\n  faWind,\r\n  faCloud\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default props => {\r\n  const [isMetric, setIsMetric] = useState(false);\r\n  const { dayForcast, fiveDaysForcast,cityName } = props;\r\n  return (\r\n    <section className=\"main-day-card .slide-in-fwd-center\">\r\n      <div className=\"left-section \">\r\n        <div className=\"date-section\">\r\n          <h2>\r\n            <Moment unix format=\"YYYY/MM/DD\">\r\n              {dayForcast.Date}\r\n            </Moment>\r\n          </h2>\r\n          \r\n        </div>\r\n\r\n        <div className=\"bottom-section\">\r\n          <div className=\"temperature-number\">\r\n            <h3 className=\"slide-in-fwd-center\">{convertUnitTemprature(dayForcast.Temperature, isMetric)}</h3>\r\n            {isMetric ? (\r\n              <span className=\"celsius-symbol slide-in-fwd-center\">°</span>\r\n            ) : (\r\n              <span className=\"fahrenheit-symbol slide-in-fwd-center\">℉</span>\r\n            )}\r\n          </div>\r\n            <h4>{cityName}</h4>\r\n          <h5>{dayForcast.WeatherText}</h5>\r\n        </div>\r\n      </div>\r\n      <div className=\"right-section\">\r\n        <div className=\"container\">\r\n          <div className=\"top-section\">\r\n            <h2>Statistics</h2>\r\n            <div className=\"side-buttons\">\r\n              <a onClick={() => setIsMetric(true)}>Metric</a>\r\n              <a onClick={() => setIsMetric(false)}>Imperial</a>\r\n            </div>\r\n          </div>\r\n          <div className=\"row-line\"></div>\r\n          <div className=\"day-statistics\">\r\n            <div className=\"day-statistics-el\">\r\n              <div className=\"font-awsome-container\">\r\n                <FontAwesomeIcon icon={faTint} />\r\n              </div>\r\n              <h5>{dayForcast.Humidity}%</h5>\r\n            </div>\r\n            <div className=\"day-statistics-el\">\r\n              <div className=\"font-awsome-container\">\r\n                <FontAwesomeIcon icon={faFlag} />\r\n              </div>\r\n              <h5>{dayForcast.WindDirection}</h5>\r\n            </div>\r\n            <div className=\"day-statistics-el\">\r\n              <div className=\"font-awsome-container\">\r\n                <FontAwesomeIcon icon={faWind} />\r\n              </div>\r\n              <h5>{dayForcast.WindSpeed} kmvh</h5>\r\n            </div>\r\n            <div className=\"day-statistics-el\">\r\n              <div className=\"font-awsome-container\">\r\n                <FontAwesomeIcon icon={faCloud} />\r\n              </div>\r\n              <h5>{dayForcast.CloudCover}%</h5>\r\n            </div>\r\n          </div>\r\n          <h2>5 Days Forcast</h2>\r\n          <div className=\"row-line\"></div>\r\n        </div>\r\n        <ul className=\"week-forcast\">\r\n          {fiveDaysForcast.length > 0 &&\r\n            fiveDaysForcast.map((item, i) => {\r\n              return (\r\n                <li key={i} className=\"slide-in-fwd-center\">\r\n                  <h3>\r\n                    <Moment unix format=\"dddd\" date={item.time} />\r\n                  </h3>\r\n                  <span>\r\n                    <p className=\"weather-text\">{item.weatherText}</p>{\" \"}\r\n                    <h4 className=\"slide-in-fwd-center\">\r\n                      {\" \"}\r\n                      {convertUnitTemprature(item.max, isMetric)}\r\n                      {isMetric ? (\r\n                        <span className=\"celsius-symbol slide-in-fwd-center\"> °</span>\r\n                      ) : (\r\n                        <span className=\"fahrenheit-symbol slide-in-fwd-center\"> ℉</span>\r\n                      )}\r\n                    </h4>\r\n                  </span>\r\n                </li>\r\n              );\r\n            })}\r\n        </ul>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector} from \"react-redux\";\r\nimport SearchField from \"../Components/SearchField\";\r\nimport MainDayCard from \"../Components/MainDayCard\";\r\nimport SearchFieldtwo from \"../Components/SearchFieldtwo\";\r\nimport weatherService from \"../services/weather-service\";\r\n\r\nconst HomePage = () => {\r\n  const favorites = useSelector(state => state.favorites);\r\n  const [dayForcast, setDayForcast] = useState(\"\");\r\n  const [fiveDaysForcast, setFiveDaysForcast] = useState(\"\");\r\n  const [cityName,setCityName]=useState(\"tralala\");\r\n  useEffect(async ()=>{\r\n    \r\n    const initDayForcast = await weatherService.getDayForcast(215854);\r\n    const initFiveDaysForcast = await weatherService.getFiveDaysForcast(215854);\r\n    setDayForcast(initDayForcast);\r\n    setFiveDaysForcast(initFiveDaysForcast);\r\n    setCityName('Tel Aviv')\r\n  },[])\r\n\r\n  return (\r\n    <section className=\"homepage\">\r\n      <div className=\"search-section\"></div>\r\n      <section className=\"card-container\">\r\n        <div className=\"wrapper\">\r\n          <div className=\"searchfield-container\">\r\n            <SearchFieldtwo\r\n              setDayForcast={setDayForcast}\r\n              setFiveDaysForcast={setFiveDaysForcast}\r\n              setCityName={setCityName}\r\n            />\r\n          </div>\r\n          <MainDayCard dayForcast={dayForcast} fiveDaysForcast={fiveDaysForcast} cityName={cityName}/>\r\n        </div>\r\n      </section>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import React from 'react';\t\r\n const initialState={\r\n     favorites:[]\r\n }\r\nfunction reducer(state = initialState, action){\r\n    \r\nswitch (action.type) {\r\n    case 'INIT':\r\n    return{\r\n        favorites:[action.payload]\r\n    }\r\n    case \"ADD_TO_FAVORITE\":\r\n    return {\r\n      favorites:[...state.favorites,action.payload]\r\n    }\r\n    case \"REMOVE_FROM_FAVORITES\":\r\n    return {\r\n            ...state\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n \r\nexport default reducer;","import { createStore } from \"redux\";\r\nimport reducer from \"./reducer\";\r\n\r\nconst Store = createStore(reducer);\r\nexport default Store;\r\n","import React from 'react';\nimport Navbar from './Components/Navbar';\nimport HomePage from './views/HomePage';\nimport { Provider } from \"react-redux\";\nimport Store from './Store/Store';\nimport './App.scss';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={Store}>\n      <Navbar/>\n      <HomePage/>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}